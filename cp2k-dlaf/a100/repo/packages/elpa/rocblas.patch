diff --git a/src/GPU/ROCm/hipUtils_template.cpp b/src/GPU/ROCm/hipUtils_template.cpp
index dfdcbe15..35df46c5 100644
--- a/src/GPU/ROCm/hipUtils_template.cpp
+++ b/src/GPU/ROCm/hipUtils_template.cpp
@@ -54,7 +54,7 @@
 
 
 #include "config-f90.h"
-#include "hip/hip_runtime.h"
+#include <hip/hip_runtime.h>
 
 #include <stdlib.h>
 #include <stdio.h>
diff --git a/src/GPU/ROCm/rocmFunctions_template.h b/src/GPU/ROCm/rocmFunctions_template.h
index 8bc69bb4..11e87ba9 100644
--- a/src/GPU/ROCm/rocmFunctions_template.h
+++ b/src/GPU/ROCm/rocmFunctions_template.h
@@ -262,9 +262,9 @@
 #ifdef HIPBLAS
 #include "hipblas.h"
 #else
-#include "rocblas.h"
+#include <rocblas/rocblas.h>
 #endif
-#include "hip/hip_runtime_api.h"
+#include <hip/hip_runtime_api.h>
 
 
 #define errormessage(x, ...) do { fprintf(stderr, "%s:%d " x, __FILE__, __LINE__, __VA_ARGS__ ); } while (0)
@@ -1563,11 +1563,11 @@ extern "C" {
   void rocblasZscal_elpa_wrapper (BLAS_handle rocblasHandle, int n, double _Complex alpha, double _Complex *X, int incx){
 
 #ifndef HIPBLAS
-    const BLAS_double_complex* X_casted = (const BLAS_double_complex*) X;
+    const BLAS_double_complex alpha_casted = *((const BLAS_double_complex*)(&alpha));
 #else
-          BLAS_double_complex* X_casted = (      BLAS_double_complex*) X;
-#endif
     BLAS_double_complex alpha_casted = *((BLAS_double_complex*)(&alpha));
+#endif
+    BLAS_double_complex* X_casted = (      BLAS_double_complex*) X;
 
     BLAS_status status = BLAS_zscal(rocblasHandle, n, &alpha_casted, X_casted, incx);
     if (status != BLAS_status_success) {
@@ -1578,11 +1578,11 @@ extern "C" {
   void rocblasCscal_elpa_wrapper (BLAS_handle rocblasHandle, int n, float _Complex alpha, float _Complex *X, int incx){
 
 #ifndef HIPBLAS
-    const BLAS_float_complex* X_casted = (const BLAS_float_complex*) X;
+    const BLAS_float_complex alpha_casted = *((BLAS_float_complex*)(&alpha));
 #else
-          BLAS_float_complex* X_casted = (      BLAS_float_complex*) X;
+    BLAS_float_complex alpha_casted = *(const BLAS_float_complex*)(&alpha));
 #endif
-    BLAS_float_complex alpha_casted = *((BLAS_float_complex*)(&alpha));
+    BLAS_float_complex* X_casted = (      BLAS_float_complex*) X;
 
     BLAS_status status = BLAS_cscal(rocblasHandle, n, &alpha_casted, X_casted, incx);
     if (status != BLAS_status_success) {
